import copyfrom mmcv import track_iter_progress, VideoReaderfrom mmpose.apis import get_track_id, inference_top_down_pose_model, init_pose_model, process_mmdet_results, \    vis_pose_tracking_resultfrom mmdet.apis import inference_detector, init_detectorimport cv2from mmpose.apis import inference_topdowndet_config = "faster_rcnn_r50_fpn_carafe_1x_coco.py"det_checkpoint = "faster_rcnn_r50_fpn_carafe_1x_coco_bbox_mAP-0.386_20200504_175733-385a75b7.pth"pose_config = 'alexnet_coco_256x192.py'pose_checkpoint = 'alexnet_coco_256x192-a7b1fd15_20200727.pth'# Model creationdet_model = init_detector(det_config, det_checkpoint, device='cuda:0')pose_model = init_pose_model(pose_config, pose_checkpoint, device='cuda:0')# Input video readingvideo = VideoReader('F:\IOVI\Ballesol\inferencia pose 2d\\video_salon_1080.avi')fps = video.fpsshape = (video.width, video.height)# writer object setupfourcc = cv2.VideoWriter_fourcc(*'mp4v')writer = cv2.VideoWriter('sample_1.mp4', fourcc, fps, shape)next_id = 0curr_pose_results = []tracked_poses = [] # list to save results for afterwardsfor curr_frame in track_iter_progress(video): # this is the main loop I refer to    prev_pose_results = curr_pose_results    # detection    det_results = inference_detector(det_model, curr_frame)    # detection filter    det_results = process_mmdet_results(det_results)    # pose inference    curr_pose_results, _ = inference_top_down_pose_model(pose_model, curr_frame, det_results, format='xyxy')    # id tracking    curr_pose_results, next_id = get_track_id(curr_pose_results, prev_pose_results, next_id)    # result representation for output video    vis_frame = vis_pose_tracking_result(pose_model, curr_frame, curr_pose_results)    writer.write(vis_frame)    tracked_poses.append(copy.deepcopy(curr_pose_results))  # save resultswriter.release()writer = cv2.VideoWriter('sample_2.mp4', fourcc, video.fps, shape)for i,frame in enumerate(video):    vis_frame = vis_pose_tracking_result(pose_model, frame, tracked_poses[i])    writer.write(vis_frame)writer.release()